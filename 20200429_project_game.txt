지금까지 배웠던 것을 응용해 볼 수 있는 프로젝트
게임
1. Hero라는 캐릭터가 있음 - class 필요
2. Hero는 무기가 3개 있음 - 변수, 상수 // 무기 객체로 선언
3. Hero는 3개의 무기 중에서 하나를 손에 들고 몬스터를 공격할 수 있다. - 메소드, 무기에는 공격할 수 있는 능력과 공격력이 있어야 한다.
// 파라미터를 하나만 받을 수 있고, 오버로딩으로 바꾸어야 하는걸까? - 어차피 다형성으로 받으면 상속받은 객체는 누구나 들어갈 수 있다.
Weapon으로 파라미터를 주면 가능하다.
몬스터는 공격력 / 방어력X, 체력만이 있으며 공격만 당함
4. Hero는 손에 들고 있는 무기를 나머지 2개와 교체할 수 있다. - 메소드 // 파라미터 값을 다르게 넣어주면 되지 않을까? 오버로딩?
5. Hero는 현재는 무기를 3개만 갖고 있지만, 다른 종류의 무기도 가질 수 있다. - 다형성 이용 필요 // 부모 클래스를 만들어 배열로 받기
====
6. Bow, Sword, Hammer의 무기를 만듦. // 각각의 클래스 생성
7. Weapon클래스를 만들고, 6번의 클래스들이 상속하도록 함. // 부모 클래스로서 사용
8. 무기들의 구성 요소 : 공격력 // 공격력은 클래스당 필드로 정해주면 될 듯
9. 무기들은 몬스터를 공격할 수 있는 능력 // 메소드, 부모 클래스에서 정의하고 상속받아도 되지 않을까, 추상클래스로 만들면?
====
10. Monster 클래스
11. Hp만 존재 private으로 선언되기 때문에 get, set메소드 사용 // setter로 데미지를 받아내면, getter로 남은 체력 돌려주기

만들어야 할 클래스
Hero, Weapon, Bow, Sword, Hammer, Monster
구현되어야 할 기능
몬스터 공격, 공격시 몬스터의 체력 감소, 무기 교체, 무기 획득 시 무기 보유량 증가

배열 생성법
1. int[] arr = new int[4]; // 반복문 사용시
2. int[] arr = {1,23,4,6};
3. int[] arr = new int[] {1, 4, 6, 7};

예외 5가지
1. try catch
2. throws
3. throw
4. 사용자 정의 예외 처리
5. finally